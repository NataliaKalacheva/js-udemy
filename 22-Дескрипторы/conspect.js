const car = {
  brand: "audi",
  year: 2019,
  get age() {
    return `Машина выпущена в ${this.year}`;
  },
  set age(value) {
    //сеттер должен называться так же, как и геттер
    this.year = value;
  }
};

//БАЗОВЫЕ СВ-ВА ОБЪЕКТА

//позволяет определить некие настройки для св-в объекта(объект, св-во(новое/имеющ.), объект дескриптор)

// Object.defineProperty(car, "age", {
//   // configurable: false //не можем удалить данное св-во, не можем конфигурировать это св-во, но мы можем его перезаписывать
//   // enumerable: false //делает св-во не итерируемым(не получаем его в списке ключей, его не видно в цикле)
//   // writable: false //запрещает запись и изменение св-ва, но при этом можем его удалить
//   get: function() {
//     return `Машина выпущена в ${this.year}`;
//   } //м.б. объявлен и в самом объекте
// });

car.age = 2018;

//console.log(car.year);
// console.log(car.hasOwnProperty("year")); //

//ГЕТЕРЫ И СЕТЕРЫ НЕ ПОПАДАЮТ В НОВЫЙ ОБЪЕКТ ПРИ КОПИРОВАНИИ

Object.defineProperty(window, "globalVar", {
  set: function(value) {
    console.log(value);
    debugger; //видим откуда вызвано изменение.он останавливает код и мы видим, откуда вызвано изменение - в call stack
  }
});

function foo() {
  globalVar = 10; //какая то функция перезаписывает глобальную переменную.Ошибка.
}

foo();
